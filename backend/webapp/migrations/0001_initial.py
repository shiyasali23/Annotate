# Generated by Django 5.1.6 on 2025-02-13 02:00

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('adminpanel', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False, unique=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=150, null=True)),
                ('last_name', models.CharField(blank=True, max_length=150, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('height_cm', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(20.0), django.core.validators.MaxValueValidator(300.0)])),
                ('weight_kg', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(20.0), django.core.validators.MaxValueValidator(300.0)])),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female')], max_length=6, null=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'webapp_user',
            },
        ),
        migrations.CreateModel(
            name='BiometricsEntry',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False, unique=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('health_score', models.FloatField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='biometrics_entries', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Biometrics',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False, unique=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('value', models.FloatField()),
                ('scaled_value', models.FloatField()),
                ('health_weight', models.FloatField()),
                ('expired_date', models.DateTimeField()),
                ('biochemical', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='biometrics', to='adminpanel.biochemical')),
                ('biometricsentry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='biometrics', to='webapp.biometricsentry')),
            ],
        ),
        migrations.CreateModel(
            name='FoodScore',
            fields=[
                ('id', models.BigAutoField(editable=False, primary_key=True, serialize=False, unique=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('score', models.FloatField()),
                ('biometricsentry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='food_scores', to='webapp.biometricsentry')),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='food_scores', to='adminpanel.food')),
            ],
        ),
        migrations.AddIndex(
            model_name='biometricsentry',
            index=models.Index(fields=['user'], name='webapp_biom_user_id_8c415b_idx'),
        ),
        migrations.AddIndex(
            model_name='biometrics',
            index=models.Index(fields=['biochemical'], name='webapp_biom_biochem_103254_idx'),
        ),
        migrations.AddIndex(
            model_name='biometrics',
            index=models.Index(fields=['biometricsentry'], name='webapp_biom_biometr_84a95b_idx'),
        ),
        migrations.AddIndex(
            model_name='foodscore',
            index=models.Index(fields=['biometricsentry'], name='webapp_food_biometr_feb5da_idx'),
        ),
        migrations.AddIndex(
            model_name='foodscore',
            index=models.Index(fields=['food'], name='webapp_food_food_id_58a7fc_idx'),
        ),
    ]
